Socket.IO is a library that enables low-latency, bidirectional and event-based communication between a client and a server.


The Socket.IO connection can be established with different low-level transports:

HTTP long-polling
WebSocket
WebTransport
Socket.IO will automatically pick the best available option, depending on:

the capabilities of the browser (see here and here)
the network (some networks block WebSocket and/or WebTransport connections)



How it works
The bidirectional channel between the Socket.IO server (Node.js) and the Socket.IO client (browser, Node.js, or another programming language) is established with a WebSocket connection whenever possible, and will use HTTP long-polling as fallback.

The Socket.IO codebase is split into two distinct layers:

the low-level plumbing: what we call Engine.IO, the engine inside Socket.IO
the high-level API: Socket.IO itself



with express

const express = require("express");
const { createServer } = require("http");
const { Server } = require("socket.io");

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, { /* options */ });

io.on("connection", (socket) => {
  // ...
});

httpServer.listen(3000);